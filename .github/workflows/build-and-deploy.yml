name: CI/CD Pipeline for Lambda Deployment

env:
  AWS_REGION: 'us-east-1'
on:
  push:
    branches:
      - '*'  # Runs on all branches
    
  pull_request:
    branches:
      - main  # Runs only on PRs targeting the main branch

permissions:
  id-token: write
  contents: read

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      # - name: Install dependencies
      #   run: |
      #     python -m pip install --upgrade pip
      #     pip install -r requirements.txt

      # - name: Run tests
      #   run: |
      #     pytest tests/

  terraform_plan:
    needs: build_and_test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'  # Only run on PRs targeting main branch
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Hashicorp - Terraform setup
        uses: hashicorp/setup-terraform@v3.1.2


      - name: Configure AWS Credentials for GitHub Actions
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          audience: sts.amazonaws.com
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}

      - name: Terraform Init
        run: |
          cd infra
          terraform init

      - name: Terraform Validate
        run: |
          cd infra
          terraform fmt -recursive
          terraform validate

      - name: Terraform Plan
        run: |
          cd infra
          terraform plan

  terraform_apply:
    needs: build_and_test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'  # Only run on push to main
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Hashicorp - Terraform setup
        uses: hashicorp/setup-terraform@v3.1.2

      - name: Configure AWS Credentials for GitHub Actions
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          audience: sts.amazonaws.com
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
  
      - name: Zip Lambda Code
        run: |
          # Create a directory for the Lambda package and copy the Python files and dependencies
          mkdir -p lambda_package
          cd lambda_package

          # Install dependencies in the Lambda package folder
          pip install -r ../beapp/requirements.txt -t .
          

          cp -r ../beapp/models .


          cp ../beapp/image_requests.py .
          # Zip the first Lambda function (image_requests.py)
          zip -r ../image_requests.zip * 
          rm ../beapp/image_requests.py

          cp ../beapp/image_scanner.py .
          # Now zip the second Lambda function (image_scanner.py)
          zip -r ../image_scanner.zip *

          cd ..

      - name: Upload to S3
        run: |
          aws s3 cp image_requests.zip s3://jothi-lambda-deployments/image_requests.zip
          aws s3 cp image_scanner.zip s3://jothi-lambda-deployments/image_scanner.zip

      - name: Terraform Init
        run: |
          cd infra
          terraform init

      - name: Terraform Validate
        run: |
          cd infra
          terraform fmt -recursive
          terraform validate

      - name: Terraform Plan
        run: |
          cd infra
          terraform plan

      - name: Terraform Apply
        run: |
          cd infra
          terraform apply -auto-approve
